1. spirng 와 springBoot 차이?
  -.2014년도에 springboot가 나온 이유는 spirng에서 xml에서 설정을 하는것과, 톰캣에 war파일 넣고 설정하고 하는게 너무 어려워서 그 부분을 개선하기 위해
    SpringBoot가 나왔다.
    
2. spirng
  -. 스프링데이터        -> DB에서 기본적인 crud는 비슷한데 이런것을 편리하게 사용하도록 도와줌.
  -. 스프링세션          -> 세션을 편리하게 도와주는것.
  -. 스프링시큐리티      -> 보안을 편리하게
  -. 스프링 rest Docs   -> API 문서, TEST 편리하게.
  -. 스프링 배치        -> 데이터 10000건을 한번에 올리기 힘드니. 데이터를 1000건 올리고 저장하고  1000건 올리고 저장하고 하면서 안정성을 올려줌.
  -. 스프링 클라우드    -> 클라우드 기술에 특화된 spring 기술

3. 스프링 프레임워크
  -. 핵심기술 : 스프링 DI 컨테이너, AOP, 이벤트 , 기타
  -. 웹  기술 : 스프링MVC, 스프링 WebFlux
  -. 데이터접근기술 : 트랜잭션, JDBC, ORM지원 , Xml 지원
  -. 기술 통합 : 캐시 , 이메일, 원격접근, 스케쥴링
  -. 테스트 : 스프링기반 테스트 지원
  -. 언어 : 코틀린, 그루

  -->> 스프링 부트를 통하여 스프링 프레임워크의 기술들을 편리하게 사용
  -->> 스프링 부트는 스프링프레임워크를 편리하게 사용하도록 제공하는 것이다.

4. 스프링의 핵심은?
  -. 자바언어 기반의 프레임워크 (객체지향의 언어)
  -. 스프링은 객체지향언어가 가진 강력한 특징을 살려내도록 만든 프레임워크

5. 좋은 객체지향이란?
  -. 클라이언트가 인터페이스에 요청하면 거기에 맞는 구현체가 소환이 된다. 근데 그 구현체는 그때 그때 상황에 맞게 변경이 가능하여 객체지향이 가능한 것이다.
  -. 즉 자동차라는 관념은 (인터페이스) , K3, 아반떼 같은 것은 (구현체)로 결국 사용자는 인터페이스 사용법을 알기만하면 구현체가 무엇이든지 사용 가능한 것이다.
  -. 즉 개발시점에서 인터페이스를 어떻게 설계하냐에 따라 개발 난이도가 달라진다. (인터페이스가 변경 되면 모든 구현체가 달라지기 때문. >> 현재 TESS 프로젝트와 같이)

6. 좋은 객체지향 설계의 5가지 원칙 (SOLID)
  -. 클린코드로 유명한 저자가 좋은 객체 지향 설계의 5가지 원칙을 정리한것.

  6-1. SRP 단일 책임 원칙
    -. 하나의 클래스는 하나의 책임만 가져야 한다.
    -. 즉 변경이 있을 경우 파급 효과가 적으면 단일 책임 원칙을 잘 따른것. (내가 개발시 서비스만 변경시 다른 코드 변경 안해도 제대로 작동하는 부분)
  6-2. OCP 개방-폐쇄 원칙
    -. 확장에는 열려있고, 변경에는 닫혀 있어야 한다. (인터페이스에서 구현 클래스는 새로 만들긴 하지만, 그와 연결된 코드는 변경이 없다.)
    -. 다형성을 사용하면 결국 코드를 변경해야 구현객체 선택을 바꿀수 있다. 그래서 OCP를 지킬수 없는데, 이것을 DI, IOC컨테이너등의 기술을 사용해야 한다.
  6-3. LSP 리스코프 치환 원칙
    -. 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀수 있어야 한다.
    -. 인터페이스에서 save를 선언하면 모든 구현체에서는 save를 해야한다.
  6-4. ISP 인터페이스 분리 원칙
    -. 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
    -. 자동차 인터페이스를 만드는 것보다 운전 인터페이스, 정비 인터페이스로 분리 하는것이 좋다.
  6-5. DIP 의존관계 역전 원칙
    -. 프로그래머는 추상화에 의존해야지 , 구체화에 의존하면 안된다. 의존성 주입은 이 원칙을 따르는 방법 중 하나
    -. 클라이언트는 memberRepository에 의존해야지, memberJdbcRepository, memberJPARepository에 의존하면 안된다.
    -. 근데 클라이언트가 memberRepository와 memberJdbcRepository와 memberJPARepository에 의존 하도록 설계했었다. 결국 선언시 new 뒤에 구현체가 있으므로
    -. 다형성만으로는 OCP, DIP를 지킬 수 없다.
    
7. 객체 지향 설계와 스프링
  -. 6번에서 이야기한 스프링의 기술로 다형성 + OCP,DIP를 가능하게 지원해준다.
  -. 결국 순수하게 자바로 OCP, DIP 원칙들을 지키면서 개발하면 결국 스프링 프레임워크를 만들게 된다.!!! (DI 컨테이너)


-----> 인터페이스를 개발하면 결국 손이 많이가게 된다. 그래서 기능을 확장할 가능성이 없다면, 구체 클래스를 직접 사용하고, 향후 꼭 필요할 때 리팩터링해서 인터페이스를 도입하는 것도 방법이다.
