1. 빈생명주기 콜백 시작
  -. 데이터베이스 커넥션풀 (어플리케이션 서버와, DB를 미리 연결 해놓은것), 네트워크 소켓(애플리케이션 시작 시점에 필요한 연결을 미리 해놓음)
  -. 초기화는 객체생성 후 의존관계 주입이 완료되어 처음 사용 될때의 시점을 말한다.
  -. 싱글톤 스프링 빈은 다음과 같은 라이프사이클을 가진다.
     스프링 컨테이너 생성 -> 스프링 빈 생성(생성자로 의존관계 주입시 일정 부분 사용됨) -> 의존관계 주입 -> 초기화 콜백 -> 사용 -> 소멸전 콜백 -> 스프링 종료
     * 초기화 콜백 : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출
     * 소멸전 콜백 : 빈이 소멸되기 직전에 호출

2. 인터페이스 InitializingBean, DisposableBean
  -. InitializingBean 인터페이스를 상속 받으면 afterPropertiesSet()로 초기화 콜백을 사용할 수 있다.
  -. DisposableBean 인터페이스를 상속 받으면 destory()로 소멸전 콜백을 사용 할 수 있다.
  -. 스프링 초창기에 나온 방법이며, 지금은 사용하지 않는다. (수정하기 힘들고, 스프링전용인터페이스라 스프링에 의존 하게 되며, 메서드명을 변경 할 수 없어서.)

3. 빈등록 초기화, 소멸 메서드
  -. @Bean(initMethod = "init" , destoryMethod = "close")
  -. @Bean 안에 생성된 객체에서 init메서드를 초기화 콜백을 사용한다. close 메서드를 소멸전 콜백 사용한다.
  -. init()로 초기화 콜백을 사용할 수 있다.
  -. close()로 소멸전 콜백을 사용 할 수 있다.
    스프링빈이 스프링코드에 의존하지 않고, 메서드이름을 내가 자유롭게 사용가능하며, 설정정보를 사용하므로 코드를 고칠수 없는 외부 라이브러리에도 초기화, 종료메서드를 적용할 수 있다.
  -. 외부 라이브러리를 사용시 destoryMeyhod의 기본값은 inferred이다. 이 추론 기능은 close나 shutDown등 라이브러리안에 종료기능을 추론해서 호출 한다.
  
4. 애노테이션 @PostConstruct, @PreDestroy --> 가장 좋은 기술
  -. @PostConstruct -> 스프링 빈에 등록된 곳에서 사용하고싶은 메서드에 붙이면 초기화 콜백으로 사용된다.
  -. @PreDestory -> 스프링 빈에 등록된 곳에서 사용하고싶은 메서드에 붙이면 소멸 콜백으로 사용된다.
  -. javax에 보면 자바표준기술이다. / 외부라이브러리에는 적용하지 못한다. (외부라이브러리에 사용할 것이면 빈등록 초기화,소멸메서드를 사용하자.) 
