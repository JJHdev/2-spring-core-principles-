1. 다양한 의존관계 주입방법
  -. 생성자 주입, 수정자주입 (setter 주입), 필드 주입, 일반메서드 주입
  -. 생성자 주입은 불변 필수이며, 생성자 호출시점에 딱 한번만 실행되어 가장 효율적인 주입방법이다.
  -. 생성자가 1개만 있으면 @Autowried를 생략해도 자동 주입된다. (스프링 빈에만 해당.)
  -. 그외에는 사용하면 좋지 않은 방법들임. (DI위반등)

2. 옵션처리
  -. @Autowired(required=false) : 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출 안됨
  -. org.springframework.lang.@Nullable : 자동 주입할 대상이 없으면 null이 입력된다.
  -. Optional<> : 자동 주입할 대상이 없으면 Optional.empty 가 입력된다.

3. 생성자 주입을 선택
  -. 과거에는 수정자 주입과 필드 주입을 많이 사용했지만, 최근에는 스프링을 포함한 DI프레임워크 대부분이 생성자 주입을 권장한다. 그 이유는 다음과 같다.
  -. 불변
    -. 대부분의 의존관계 주입은 한번 일어나면 애플리케이션 종료시점까지 의존관계를 변경할 일이 없다. 오히려 대부분의 의존관계는 애플리케이션 종료 전까지 변하면 안된다. (불변해야 한다.)
    -. 수정자 주입을 사용하면, setter 메서드를 public으로 열어 두어야 한다.
    -. 누군가 실수로 변경할 수 도 있고, 변경하면 안되는 메서드를 열어두는 것은 좋은 설계 방법이 아니다.
    -. 생성자 주입은 객체를 생성할 떄 딱 1번만 호출 되므로 이후에 호출되는 일이 없다. 따라서 불변하게 설계할 수 있다.

4. 조회빈이 2개 이상
  -. @Autowired는 타입(type)로 조회 한다.
  -. @Autowried
     private DiscountPolicy discountPolicy 
    --> 타입으로 조회 하기 때문에 다음 코드와 유사하게 동작 ( ac.getBean(DiscountPolicy.class) )
  -. 이럴경우 FixDiscointPolicy, RateDiscountPolicy 둘다 스프링 빈으로 선언되어있으면 중복으로 2개가 등록 되어 에러를 유발한다.

5. @Autowired 필드 명, @Qualifier, @Primary
  -. 4번과 같이 에러가 발생 할경우 해결 방법은 @Autowired 필드 명, @Qualifier, @Primary 3가지가 있다.
  5-1. @Autowired 필드명
    기존 코드 ```
              @Autowired
              private DiscountPolicy discountPolicy
              ```
    변경 코드  ```
              @Autowired
              private DiscountPolicy rateDiscountPolicy
              ```
    와같이 필드명을 변경시 타입 매칭후 중복을 발견하면 필드 명, 파라미터명으로 빈이름을 매칭한다.

  5-2. @Qualifier
    -. 빈 등록시 @Qualifier를 붙여 준다. 
    ```java
        @Component
        @Qualifier("mainDiscountPolicy")
        public class RateDiscountPolicy implements DiscountPolicy {} 
    ```
    ```java
        @Component
        @Qualifier("fixDiscountPolicy")
        public class FixDiscountPolicy implements DiscountPolicy {}
    ```
        생성자 자동 주입 예시 
    ```java
        @Autowired
        public OrderServiceImpl(MemberRepository memberRepository,
         @Qualifier("mainDiscountPolicy") DiscountPolicy
        discountPolicy) {
         this.memberRepository = memberRepository;
         this.discountPolicy = discountPolicy;
        }
    ```
        수정자 자동 주입 예시 
    ```java
        @Autowired
        public DiscountPolicy setDiscountPolicy(@Qualifier("mainDiscountPolicy") 
        DiscountPolicy discountPolicy) {
         this.discountPolicy = discountPolicy;
        }
    ```

  5-3. @Primary 사용
    -. @Primary는 우선순위를 정하는 방법이다. @Autowired시에 여러 빈이 매칭 되면 @Primary가 우선권을 가진다.
    -. @Component
       @Primary
       public class RateDiscountPolicy implements DiscountPolicy {}

       @Component
       public class FixDiscountPolicy implements DiscountPolicy {}

  -. 현장에서는 @Primary, @Qualifier 활용하여 사용한다.

6. 조회한 빈이 모두 필요할 때, List, Map
   static class DiscountService {
     private final Map<String, DiscountPolicy> policyMap;
     private final List<DiscountPolicy> policies;

     public DiscountService(Map<String, DiscountPolicy> policyMap,  List<DiscountPolicy> policies) {
       this.policyMap = policyMap;
       this.policies = policies;
       System.out.println("policyMap = " + policyMap);
       System.out.println("policies = " + policies);
     }

     public int discount(Member member, int price, String discountCode) {
       DiscountPolicy discountPolicy = policyMap.get(discountCode);
       System.out.println("discountCode = " + discountCode);
       System.out.println("discountPolicy = " + discountPolicy);
       return discountPolicy.discount(member, price);
     }
   }

 -. 일 경우 각각 여러개의 빈 타입이 있을 경우 List, Map 으로 받을수 있다.

7. 자동, 수동의 올바른 실무 운영기준
  애플리케이션은 크게 업무 로직과 기술 지원 로직으로 나눌 수 있다.
  업무 로직 빈: 웹을 지원하는 컨트롤러, 핵심 비즈니스 로직이 있는 서비스, 데이터 계층의 로직을 처리하는 리포
  지토리등이 모두 업무 로직이다. 보통 비즈니스 요구사항을 개발할 때 추가되거나 변경된다.
  기술 지원 빈: 기술적인 문제나 공통 관심사(AOP)를 처리할 때 주로 사용된다. 데이터베이스 연결이나, 공통 로그
  처리 처럼 업무 로직을 지원하기 위한 하부 기술이나 공통 기술들이다.
  업무 로직은 숫자도 매우 많고, 한번 개발해야 하면 컨트롤러, 서비스, 리포지토리 처럼 어느정도 유사한 패턴이
  있다. 이런 경우 자동 기능을 적극 사용하는 것이 좋다. 보통 문제가 발생해도 어떤 곳에서 문제가 발생했는지 명
  확하게 파악하기 쉽다.
  기술 지원 로직은 업무 로직과 비교해서 그 수가 매우 적고, 보통 애플리케이션 전반에 걸쳐서 광범위하게 영향을
  미친다. 그리고 업무 로직은 문제가 발생했을 때 어디가 문제인지 명확하게 잘 드러나지만, 기술 지원 로직은 적용
  이 잘 되고 있는지 아닌지 조차 파악하기 어려운 경우가 많다. 그래서 이런 기술 지원 로직들은 가급적 수동 빈 등
  록을 사용해서 명확하게 드러내는 것이 좋다.
  애플리케이션에 광범위하게 영향을 미치는 기술 지원 객체는 수동 빈으로 등록해서 딱! 설정 정보에 바로 나타나게 하는
  것이 유지보수 하기 좋다.
