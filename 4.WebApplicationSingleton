1. 웹 애플리케이션과 싱글톤
  1-1. 스프링 없는 순수한 DI컨테이너인 AppConfig는 웹에서 여러 고객이 memberService에 요청하면 각 고객마다 객체를 새로 생성해서 주게 되는데 이게 성능상 문제가 생긴다.
      -> 메모리 낭비가 심하여, 해결 방안으로는 객체가 딱 1개만 생성되고 , 공유하도록 설계 하면 된다. (싱글톤패턴)

2. 싱글톤 패턴
''' 싱글톤 패턴 적용으로 객체 생성
public class SingletonService {

    //1. static 영역에 객체를 딱 1개만 생성해둔다.
    private static final SingletonService instance = new SingletonService();

    // 2. public으로 열어서 객체 인스턴스가 필요하면 이 static 메서드를 통해서만 조회하도록 허용한다.
    public static SingletonService getInstance(){
        return instance;
    }

    //3. 생성자를 private으로 선언해서 외부에서 new 키워드를 사용한 객체 생성을 못하게 막는다.
    private SingletonService(){}

    public void login(){
        System.out.println("싱글톤 객체 로직 호출");
    }
}
'''
-------------
''' 싱글톤 패턴 적용한 로직과 아닌 로직 출력
   @Test
    @DisplayName("스프링 없는 순수한 DI 컨테이너")
    void pureContainer(){
        AppConfig appConfig = new AppConfig();
        //1. 조회 : 호출할 때 마다 객체를 생성
        MemberService memberService1 = appConfig.memberService();
        //2. 조회 : 호출할 때 마다 객체를 생성
        MemberService memberService2 = appConfig.memberService();

        //참조값이 다른 것을 확인
        System.out.println("memberSerivce1 = " + memberService1);
        System.out.println("memberService2 = " + memberService2);

        // memberService1 != memberService2
        assertThat(memberService1).isNotSameAs(memberService2);
    }

    @Test
    @DisplayName("싱글톤 패턴을 적용한 객체 사용")
    public void singletonServiceTest(){
        //1. 조회: 호출할 때 마다 같은 객체를 반환
        SingletonService singletonService1 = SingletonService.getInstance();
        //2. 조회: 호출할 때 마다 같은 객체를 반환
        SingletonService singletonService2 = SingletonService.getInstance();

        //참조값이 같은지 확인
        System.out.println("singletonService1 = " + singletonService1);
        System.out.println("singletonService2 = " + singletonService2);

        //singletonService1 == singletonService2
        Assertions.assertThat(singletonService1).isSameAs(singletonService2);

        singletonService1.login();
    }
'''
Assertions에서 
 -. same => 자바 == 인스턴스가 같은지?
 -. equal => equlas메소드 글자가 같은지?

 싱글톤 패턴의 단점
    2-1. 싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
    2-2. 의존관계상 클라이언트가 구체 클래스에 의존한다. DIP를 위반한다.
    2-3. 클라이언트가 구체 클래스에 의존해서 OCP 원칙을 위반할 가능성이 높다.
    2-4. 테스트하기 어렵다.
    2-5. 내부 속성을 변경하거나 초기화 하기 어렵다.
    2-6. private 생성자로 자식 클래스를 만들기 어렵다.
    2-7. 결론적으로 유연성이 떨어진다.
    2-8. 안티패턴으로 불리기도 한다.

3. 싱글톤 컨테이너
  3-1. 스프링컨테이너는 싱글톤패턴의 단점을 해결하는 방법이 되며 객체 인스턴스를 싱글톤으로 관리한다.
  3-2. @Bean이 객체 하나만 생성해서 관리하면서 사용하는 것이다.
'''
    @Test
    @DisplayName("스프링 컨테이너와 싱글톤")
    void springContainer(){
        ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

        //1. 조회 : 호출할 때 마다 같은 객체를 반환
        MemberService memberService1 = ac.getBean("memberService", MemberService.class);
        //2. 조회 : 호출할 때 마다 같은 객체를 반환
        MemberService memberService2 = ac.getBean("memberService", MemberService.class);

        System.out.println("memberService1 = " + memberService1);
        System.out.println("memberService2 = " + memberService2);

        //memberService1 == memberService2
        Assertions.assertThat(memberService1).isSameAs(memberService2);
    }
'''

4. 싱글톤 방식의 주의점
  4-1. 여러 클라이언트가 하나의 객체를 공유해서 사용하므로 주의점이 있다. 
    -. 무상태(stateless)로 설계해야 한다!
    -. 특정 클라이언트에 의존적인 필드가 있으면 안된다.
    -. 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다!가급적 읽기만 가능해야 한다.
    -. 필드 대신에 자바에서 공유되지 않는, 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다.
    
''' 가격 저장하는 코드
public class StatefulService {
    private int price;
    public void order(String name, int price) {
        System.out.println("name = " + name + "price = " + price);
        this.price = price;
    }
    public int getPrice(){
        return price;
    }
}
''' 상단 을 하나의 객체로 실행시 문제점 
--------------------
''' 
    @Test
    void statefulServiceSingleton(){
        ApplicationContext ac = new AnnotationConfigApplicationContext(TestConfig.class);

        StatefulService statefulService1 = ac.getBean("statefulService", StatefulService.class);
        StatefulService statefulService2 = ac.getBean("statefulService", StatefulService.class);

        // ThreadA : A사용자 10000원 주문
        statefulService1.order("userA", 10000);
        // ThreadB : B사용자 20000원 주문
        statefulService2.order("userB", 20000);

        // ThreadA : A사용자 10000원 주문
        int price = statefulService1.getPrice();
        // ThreadA : 사용자A는 10000원을 기대했지만, 기대와 다르게 20000원 출력
        System.out.println("price = " + price);

        Assertions.assertThat(statefulService1.getPrice()).isEqualTo(20000);

    }

    static class TestConfig {
        @Bean
        public StatefulService statefulService(){
            return new StatefulService();
        }
    }
'''

그러면 어떻게 해야할까? 방식은 지역변수를 활용하여 예방할수 있다.
''' 변경 후 코드 
public class StatefulService {

    private int price;

    public int order(String name, int price) {
        System.out.println("name = " + name + "price = " + price);
        return price;
    }

}
'''
''' 변경 후 코드
    @Test
    void statefulServiceSingleton(){
        ApplicationContext ac = new AnnotationConfigApplicationContext(TestConfig.class);

        StatefulService statefulService1 = ac.getBean("statefulService", StatefulService.class);
        StatefulService statefulService2 = ac.getBean("statefulService", StatefulService.class);

        // ThreadA : A사용자 10000원 주문  --> 여기에서 지역변수로 할당하여 실행
        int userAPrice = statefulService1.order("userA", 10000);
        // ThreadB : B사용자 20000원 주문  --> 여기에서 지역변수로 할당하여 실행
        int userBPrice = statefulService2.order("userB", 20000);

        System.out.println("userAprice = " + userAPrice);
        System.out.println("userBprice = " + userㅠPrice);
    }

    static class TestConfig {
        @Bean
        public StatefulService statefulService(){
            return new StatefulService();
        }
    }
    '''
5. @Configuration과 싱글톤
      @Bean -> memberService 빈을 만드는 코드를 보면 @Bean -> memberRepository() 를 호출한다.
      이 메서드를 호출하면 new MemoryMemberRepository() 를 호출한다.
      @Bean -> orderService 빈을 만드는 코드도 동일하게 @Bean -> memberRepository() 를 호출한다.
      이 메서드를 호출하면 new MemoryMemberRepository() 를 호출한다. 
 -> 이것을 TEST 해보면 같은 객체를 호출하는게 보인다. 왜그런지는 6번에서 살펴보겠다.


6. @Configuration과 바이트코드 조작의 방법

 6-1. 사실 AnnotationConfigApplicationContext 에 파라미터로 넘긴 값은 스프링 빈으로 등록된다. 그래서 AppConfig 도 스프링 빈이 된다.
      AppConfig 스프링 빈을 조회해서 클래스 정보를 출력해보자.

      @Configuration
      public xxx AppConfig (){}
      
      '''
      @Test
      void configurationDeep() {
       ApplicationContext ac = new
      AnnotationConfigApplicationContext(AppConfig.class);
       //AppConfig도 스프링 빈으로 등록된다.
       AppConfig bean = ac.getBean(AppConfig.class);
       
       System.out.println("bean = " + bean.getClass());
       //출력: bean = class hello.core.AppConfig$$EnhancerBySpringCGLIB$$bd479d70
      }
      '''
      
      위와 같이 뜰것 이다. 
      순수한 클래스라면 다음과 같이 출력되어야 한다.
      class hello.core.AppConfig
      그런데 예상과는 다르게 클래스 명에 xxxCGLIB가 붙으면서 상당히 복잡해진 것을 볼 수 있다. 이것은 내가 만든 클래 스가 아니라 
      스프링이 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상속받은 임의의 다른 클래스를 만들고, 그 다른 클래스를 스프링 빈으로 등록한 것이다!
      
      
      AppConfig@CGLIB 예상 코드 
      ```java -1
      @Bean
      public MemberRepository memberRepository() {
       
       if (memoryMemberRepository가 이미 스프링 컨테이너에 등록되어 있으면?) {
         return 스프링 컨테이너에서 찾아서 반환;
       } else { //스프링 컨테이너에 없으면
         기존 로직을 호출해서 MemoryMemberRepository를 생성하고 스프링 컨테이너에 등록
         return 반환
       }
      }
      ```
      @Bean이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면 생성해서 스
      프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다.
      덕분에 싱글톤이 보장되는 것이다.
      
       AppConfig@CGLIB는 AppConfig의 자식 타입이므로, AppConfig 타입으로 조회 할 수 있다.
      
      
      @Configuration 을 적용하지 않고, @Bean 만 적용하면 어떻게 될까?
      @Configuration 을 붙이면 바이트코드를 조작하는 CGLIB 기술을 사용해서 싱글톤을 보장하지만, 만약 @Bean만
      적용하면 어떻게 될까?
      
      --> @Bean에 있는 것들이 호출 될 때. 내부에 있는 로직들이 스프링빈에 저장해서 사용하는게 아니라 그때 그때 모든 알고리즘들을 수행한다. java -1 알고리즘이 사라진다.
      --> 그리고 @Bean으로 등록할때 한번 호출하고 외부에서 호출하면 그떄 또 호출되어 사용된다.
      
      --> @Bean이 있으면 외부에서 같은 메소드로 호출 될때. private final MemberRepository memberRepository; 와같이 호출 될때 Bean에 등록되어 있는 것들이 호출되는것
      --> @Configuration 이 있으면 @CGLIB기술을 사용해서 메소드들은 호출될때마다 스프링컨테이너에 저장하면서 사용하는 것.
      --> @Autowired를 사용해서 만들면 @Bean에 등록 되어 있는 객체를 사용하는것 (객체가 같은것을 사용하는게 보장된다.)


      정리
      @Bean만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.memberRepository() 처럼 의존관계 주입이 필요해서 메서드를 직접 호출할 때 싱글톤을 보장하지 않는다.
      크게 고민할 것이 없다. 스프링 설정 정보는 항상 @Configuration 을 사용하자.












