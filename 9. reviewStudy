1. 객체 지향 설계와 스프링
  1.1 다형성에서 역할과 구현으로 구분하면 편하다. 
    -> 로미오와 줄리엣에서 로미오 (역할)은 어떤 배우든지 할수 있다. (역할은 인터페이스), (배우는 구현객체) 여러 배우들이 모여 연극(어플리케이션)이 만들어지는데 만약 배우가 몸이 아파 다른 배우를 캐스팅해도 배우는 자신의 역할을 알고 익혀있으니 돌아갈수 있다.
    -> 클라이언트는 대상의 역할(인터페이스)만 알면되고, 구현 대상의 내부구조는 몰라도 된다.
    -> public class MemberService {
        // private MemberRepository memberRepository = new MemoryMemberRepository();
         private MemberRepository memberRepository = new JdbcMemberRepository();
      }
      코드로 보면 이렇게 표현할수 있다.
      
  1.2 OCP는 개방폐쇄의 원칙인데 확장에는 열려있으며, 변경에는 닫혀있어야 한다는것인데, 기능을 확장할려면 코드를 변경해야 하는데, 어떻게 그럴수있을까?
    -> public class MemberService {
        // private MemberRepository memberRepository = new MemoryMemberRepository();
         private MemberRepository memberRepository = new JdbcMemberRepository();
      } 1.2 위반
    
  1.3 DIP의존관계 역전의 원칙 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻
    -> MemberRepository m = new MemoryMemberRepository(); 1.3 위반
    
  1.4 다형성 만으로는 OCP, DIP를 지킬 수 없다. 그리하여 스프링의 기술로 OCP, DIP를 지킬 수 있도록 해준다.. 


2. 스프링 핵심 원리 이해1 - 예제 만들기
  2.1 MemberService memberService = new MemberServiceImpl(); 이렇게 설계를 하면 구현객체에게 의존하게 된다. (구현객체가아닌 추상화에 의존해야한다.)

3. 스프링 핵심 원리 이해2 - 객체 지향 원리 적용
  3.1 > 2.1에서 구현클래스에 의존하는 문제점을 확인할 수 있었다. 이를 해결할려면 어떻게 해야할까?
      > AppConfig의 등장으로 이를 해결할수 있다. (애플리케이션의 전체 동작 방식을 구성(config)하기 위해, 구현 객체를 생성하고, 연결하는 책임을 가지는 별도의 설정 클래스를 만들자.) // Spring 애노테이션 사용하기전.
      > public class AppConfig {

            public MemberService memberService() {
                return new MemberServiceImpl(new MemoryMemberRepository());
            }
            public OrderService orderService() {
                return new OrderServiceImpl(new MemoryMemberRepository(), new FixDiscountPolicy());
            }
        }
    > 위와 같은 설정으로 아래와 같이 의존관계를 맺을수 있게 되었다. (생성자로 통해서 의존관계를 맺어야 한다.)
      MemberServiceImpl MemoryMemberRepository
      OrderServiceImpl MemoryMemberRepository , FixDiscountPolicy

    3.2 실제 코드로 보자면 아래와 같다. (AppConfig class)
         private final MemberRepository memberRepository;
         private final DiscountPolicy discountPolicy;

         public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
             this.memberRepository = memberRepository;
             this.discountPolicy = discountPolicy;
         }

    3.3 실제 test코드에서는 아래와 같이 실행하면 된다. 
        AppConfig appConfig = new AppConfig();
        MemberService memberService = appConfig.memberService();

      0, AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을 IoC 컨테이너 또는 DI 컨테이너라 한다. 

    3.4 >> 3.3 처럼 객체를 사용해야하는데 이것을 스프링으로 전환해서 사용해보자 
      -. @Configuration
         public class AppConfig {
         
             @Bean
             public MemberService memberService() {
                 return new MemberServiceImpl(memberRepository());
             }
    
             @Bean
             public OrderService orderService() {
                 return new OrderServiceImpl( memberRepository(), discountPolicy());
             }
    
             @Bean
             public MemberRepository memberRepository() {
                 return new MemoryMemberRepository();
             }
             @Bean
             public DiscountPolicy discountPolicy() {
                 return new RateDiscountPolicy();
             }
        }

      -> @Configuration과 @Bean을 붙여준다.
      -> ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
         MemberService memberService = applicationContext.getBean("memberService", MemberService.class);

      -> 방식으로 사용이 가능하다. 

4. 스프링 컨테이너와 스프링 빈
    4.1 ApplicationContext를(+ BeanFactory) 스프링 컨테이너라 한다.그리고 이는 인터페이스다.
          -> 그리고 XML기반으로 만들수 있고, 애노테이션 기반의 자바 설정클래스로 만들수 있다.
    4.2  3.4처럼 스프링컨테이너 안에 Bean 안에 이름과 객체를 저장한다.

    4.3 컨테이너에 등록된 빈 자체를 조회해보자!
      -> AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
          -. 모든 빈 조회하기.
          -. String[] beanDefinitionNames = ac.getBeanDefinitionNames();
          -. ac.getBean(beanDefinitionName);
          -. (beanDefinition.getRole()을 하면 2가지 역할이 있다. (스프링내부에서 사용하는 빈, 사용자가 정의한 빈 등으로 구분해서 조회할수 있다.)
          -. BeanDefinition.ROLE_APPLICATION(사용자정의) //   ROLE_INFRASTRUCTURE(스프링 내부 정의빈)

          -. 특정 빈 조회하기.
          -. MemberService memberService = ac.getBean("memberService", MemberService.class);  //   
              ac.getBean(MemberService.class);  // ac.getBean(빈이름, 타입)
          
          -. 특정 빈 조회하기. (동일한 타입이 둘이상 >> 빈이름이 다르던가, Map으로 받을수 있다.)
          -. MemberRepository memberRepository = ac.getBean("memberRepository1", MemberRepository.class);
          -. Map<String, MemberRepository> beansOfType = ac.getBeansOfType(MemberRepository.class);


      4.4 BeanFactory와 ApplicationContext 에대해서
        -. <BeanFactory>라는 인터페이스를 상속 받은 ApplicationContext 인터페이스를 상속받은 AnnoattionConfigApplicationContext가 있다.
        -. BeanFactory를 상속받아서 ApplicationContext에서 이용이 가능하다 그런데 ApplicationContext의 차이점은 뭘까? 
          -. ApplicationContext는 다른인터페이스를 추가로 상속받아 메시지소스를 활용한 국제화기능, 환경변수, 애플리케이션 이벤트, 편리한 리소스 조회등 추가 기능이 있다.
        -. ApplicationContext라는 인터페이스를 상속받아 이를 만들수 있는 설정정보들은 여러가지가 있는데 이는 AnnotationConfigApplicationContext (appConfig.class), GenericXmlApplicationContext (appConfig.xml) 설정으로
            스프링컨테이너 설정정보를 설정할수 있다.

      4.5 XML을 기반으로 스프링컨테이너 만드는법은
        -.  <bean id="memberRepository"  class="hello.core.member.MemoryMemberRepository" />
            <bean id="orderService" class="hello.core.order.OrderServiceImpl">
                <constructor-arg name="memberRepository" ref="memberRepository" />
            </bean>
  
        -. ApplicationContext ac = new GenericXmlApplicationContext("appConfig.xml");
        -. MemberService memberService = ac.getBean("memberService", MemberService.class);

      4.6 AnnotationConfigApplicationContext, GenericXmlApplicationContext은 BeanDefinition라는 추상화를 이용하여 각 설정을 유연하게 읽어서 셋팅한다.

5. 싱글톤 컨테이너
  5.1 싱글톤 패턴이 없는 객체 생성
     AppConfig appConfig = new AppConfig();
     //1. 조회: 호출할 때 마다 객체를 생성
     MemberService memberService1 = appConfig.memberService();
     //2. 조회: 호출할 때 마다 객체를 생성
     MemberService memberService2 = appConfig.memberService();

  5.2 싱글톤 패턴 적용된 객체
  //1. static 영역에 객체를 딱 1개만 생성해둔다.
    private static final SingletonService instance = new SingletonService();
  //2. public으로 열어서 객체 인스턴스가 필요하면 이 static 메서드를 통해서만 조회하도록 허용한다.
    public static SingletonService getInstance() {
        return instance;
    }

   //1. 조회: 호출할 때 마다 같은 객체를 반환
     SingletonService singletonService1 = SingletonService.getInstance();
   //2. 조회: 호출할 때 마다 같은 객체를 반환
     SingletonService singletonService2 = SingletonService.getInstance();

  5.3 위와 같이 싱글톤 패턴을 적용해서 사용시 코드자체가 많아지고 OCP원칙을 위반할 가능성이 높아진다.
      스프링컨테이너를 이용하여 스프링빈을 사용하는데 이는 싱글톤으로 관리되는 빈이다. 

    ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
    
  //1. 조회: 호출할 때 마다 같은 객체를 반환
    MemberService memberService1 = ac.getBean("memberService",  MemberService.class);
  //2. 조회: 호출할 때 마다 같은 객체를 반환
    MemberService memberService2 = ac.getBean("memberService", MemberService.class);

  5.4 싱글톤 패턴이든, 스프링 같은 싱글톤컨테이너를 사용하든 이는 하나의 객체를 공유하기 떄문에 stateful하게 설계하면 안된다.
    -. 무상태(stateless)로 설계해야 한다!
    1. 특정 클라이언트에 의존적인 필드가 있으면 안된다.
    2. 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다!
    3. 가급적 읽기만 가능해야 한다.
    4. 필드 대신에 자바에서 공유되지 않는, 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다
      ex) public class StatefulService {
              private int price; //상태를 유지하는 필드
              public void order(String name, int price) {
                  this.price = price; //여기가 문제!
              }
          }

    5.5 스프링컨테이너에서 인스턴스를 만드는데 @CGLIB기술을 사용한다 이는 복잡해서 파악하긴 힘들지만 예측하기로는
      -. @Configuration을 사용하면 그 클래스에는 CGLIB로 등록되고 클래스안에 @Bean에 등록된 메서드들은 스프링컨테이너에 등록되어있으면 스프링컨테이너에서 찾아서 반환하고 없을 경우 @Bean에서 찾아서 스프링 컨테이너에 등록한다.

    5.6 @Configuration 을 적용하지 않고, @Bean 만 적용하면 어떻게 될까?
        @Configuration 을 붙이면 바이트코드를 조작하는 CGLIB 기술을 사용해서 싱글톤을 보장하지만, 만약 @Bean만 적용하면 어떻게 될까?
      -. bean = class hello.core.AppConfig 형식으로 CGLIB기술 없이 순수한 객체가 저장된다. 


6. 컴포넌트 스캔
  6.1 스프링은 설정 정보가 없어도 자동으로 스프링 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공한다.
      또 의존관계도 자동으로 주입하는 @Autowired 라는 기능도 제공한다.

  6.2 @Configuration
      @ComponentScan( excludeFilters = @Filter(type = FilterType.ANNOTATION, classes = Configuration.class))
      public class AutoAppConfig { }

    -. @ComponentScan은 위치한 곳에서부터 하위 경로에 전부 @Configuration , @Component 애노테이션이 붙은 클래스를 스캔해서 스프링 빈으로 등록한다.
    -. 이전에 AppConfig에서는 @Bean 으로 직접 설정 정보를 작성했고, 의존관계도 직접 명시했다. 이것은 이제 @AutoWired로 해결해야 한다. (생성자 주입)
      -> @Autowired
         public MemberServiceImpl(MemberRepository memberRepository) {
             this.memberRepository = memberRepository;
         }

    -. 이렇게 설정된 정보는 아래와 같이 사용할수 있다.
      -. ApplicationContext ac = new AnnotationConfigApplicationContext(AutoAppConfig.class);
         MemberService memberService = ac.getBean(MemberService.class);

    -. 참고로 스프링 부트를 사용하면 스프링 부트의 대표 시작 정보인 @SpringBootApplication 를 이 프로젝트 시작 루트 위치에 두는 것이 관례이다. (그리고 이 설정안에 바로 @ComponentScan 이 들어있다!)

    -. @ComponentScan을 실행하면 >> @Controller, @Service, @Repository, @Configuration 의 내용들이 스프링빈의 추가된다.
    -. @Configuration과 @ComponenteScan을 같이 사용한 이유는 @Configuration이 싱글톤을 보장해주기 때문이다.

    -. 주로 클래스 빈은 자동으로 스캔되어 등록되는 경우가 많고, 메소드 빈은 개발자가 명시적으로 빈을 정의하고 등록해야 합니다. 메소드 빈은 더 세밀한 설정이 필요한 경우에 유용하게 사용될 수 있습니다.

7. 의존관계 자동 주입
  7.1 의존관계 주입방법에는 (1. 생성자주입, 2. 수정자주입(setter) 3. 필드주입 4. 일반메서드 주입 이 있다.
  7.2 기존에 사용하던방법은 (생성자 주입)
  7.3 수정자 주입  @Autowired
                  public void setMemberRepository(MemberRepository memberRepository) {
                      this.memberRepository = memberRepository;
                  }
  7.4 필드 주입 @Autowired
               private MemberRepository memberRepository;

  7.5 //호출 안됨
      @Autowired(required = false)
      public void setNoBean1(Member member) {
           System.out.println("setNoBean1 = " + member);
      }
      //null 호출
      @Autowired
      public void setNoBean2(@Nullable Member member) {
           System.out.println("setNoBean2 = " + member);
      }
      //Optional.empty 호출
      @Autowired(required = false)
      public void setNoBean3(Optional<Member> member) { 
          System.out.println("setNoBean3 = " + member);
      }

  -. @Autowired
     private DiscountPolicy discountPolicy
    이 코드와 유사하게 동작하는 코드는 ac.getBean(DiscountPolicy.class) 이코드 이다. (타입으로 조회한다.)

  -. @AutoWired는 의존성주입에 사용하는 애노테이션으로 필드, 생성자, setter 메소드에 사용이 가능하다.
    -> 이 애노테이션을 사용하면 처음에는 타입에 매칭하고 타입의 결과가 2개일 경우 필드명, 파라미터 명으로 빈이름을 매칭한다.

  -. 빈을 조회시 map과 List로 조회도 가능하다.

8. 빈 생명주기 콜백
  8.1 스프링 빈의 이벤트 라이프사이클
      스프링 컨테이너 생성 -->>  스프링 빈 생성 -->> 의존관계 주입 -->> 초기화 콜백 -->> 사용 -->> 소멸전 콜백 -->> 스프링 종료
  
  8.2 스프링은 크게 3가지 방법으로 빈 생명주기 콜백을 지원한다.
    -. 인터페이스(InitializingBean, DisposableBean)
    -. 설정 정보에 초기화 메서드, 종료 메서드 지정
    -. @PostConstruct, @PreDestroy 애노테이션 지원

  8.2 인터페이스 방식 : public class NetworkClient implements InitializingBean, DisposableBean { } 하여 Override를 하여 초기화, 소멸전 콜백을 사용할 수있다.

  8.3 설정정보에 지정 방식 : @Bean(initMethod = "init", destroyMethod = "close")

  8.4 @PostConstruct
      public void init() {
          System.out.println("NetworkClient.init");
          connect();
          call("초기화 연결 메시지");
      }
      @PreDestroy
      public void close() {
          System.out.println("NetworkClient.close");
          disConnect();
      }

    % @Component 애노테이션이 붙은 클래스는 주로 기본적인 컴포넌트를 스프링에게 인식시키는 용도로 사용되며, @Bean 애노테이션은 더 세밀한 빈 설정을 위해 사용됩니다
    % @Configuration, @ComponentScan, @Component, @Autowired , @Bean 의 특징들
      1. @Configuration, @ComponentScan 의 차이
        -. @Configuration은 명시적으로 개발자가 스프링빈으로 등록하고 내부이 @Bean을 통해 등록된다. @ComponentScan은 하위 클래스단위에 특정 애노테이션이 붙을경우 스캔대상으로 스프링 빈으로 등록된다.
        -. @Configuration을 사용하여 설정을 정의하면 해당 클래스를 컨테이너의 설정으로 인식하고, 내부의 @Bean 메소드를 호출하여 빈을 생성합니다. 

      2. @Component와 @Bean으로 스프링빈을 등록이 가능한데 @ComponentScan대상에 없을경우 프로토스코프로 생성되고, @ComponentScan대상에 있을 경우 싱글톤으로 관리된다.
      3. @Autowired로 의존관계를 맺으면 자동의존관계주입이고, @Bean을 통해서 맺을수도 있는데 이는 수동의존관계주입이다.
      4. 

9. 빈 스코프
  9.1  스코프는 번역 그대로 빈이 존재할 수 있는 범위를 뜻한다.
  9.2 싱글톤: 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.
      프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다.
      웹 관련 스코프 : 
          request: 웹 요청이 들어오고 나갈때 까지 유지되는 스코프이다.
          session: 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.
          application: 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프이다.

    -. 싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링 빈을 반환한다. 반면에 프로토타입 스코프를 스프링 컨테이너에 조회하면 스프링 컨테이너는 항상 새로운 인스턴스를 생성해서 반환한다.







