1. 이번 내용은 회원데이터, 할인 정책 같은 부분은 지금 결정하기 어려워서 추후에 진행할 것이다. 그래서 객체지향으로 방향으로 설계할 것이다.
   인터페이스를 만들고 구현체를 언제든지 갈아 끼울 수 있도록 설계 한다.

2-1. 회원 도메인 설계
  -. 회원을 가입 및 조회 기능
  -. 회원은 일반과 VIP 등급 두가지 있음.
  -. 회원 데이터는 자체 DB를 구축하거나 , 외부 시스템과 연동 할 수 있다.

2-2. 이럴 경우 설계는 어떻게 해야할까?
  도메인에대한 그림.  (기획자도 이해하는 그림)
    클라이언트  -->  회원서비스(가입,조회)  --> 회원저장소(인터페이스) -->/ 메모리 회원저장소, DB 회원 저장소, 외부 시스템 연동 회원 저장소 (구현체)

  회원 클래스 다이어 그램 (정적임.)
    MemberServier(I.P) / MemverServiceImpl   -->  MemberRepisotory(I.P) / MemoryMemberRepository , DbMemberRepository

  회원 객체 다이어 그램 (상황에 따라 다르니 동적임.)
    클라이언트 --> 회원서비스 --> 메모리 회원 저장소
  
3-1. 주문과 할인 도메인 설계
  -. 회원은 상품을 주문 가능
  -. 회원 등급에 따라 할인 정책 적용
  -. 모든 VIP는 1000원을 할인하게 고정할 것
  -. 할인 정책은 언제 반영할지 모르겠다.

3-2. 여기에서는
  -. 주문 생성 -> 회원 조회 -> 할인 적용 확인 -> 주문 결과 반환 순의 알고리즘으로 진
  주문 도메인 클래스 다이어 그램 (정적임.)
  -. OrderService(I.P) / OrderServiceImpl --> MemberRepository (I.P) / memoryMemberRepository , DbMemberRepository
                                          --> DiscountPolicy   (I,P) / FixDiscountPolicy  ,  RateDiscountPolicy

  주문 도메인 객체 다이어그램1 (상황에 따라 다르니 동적임.)
  -. 클라이언트  --> 주문 서비스 구현체   --> 메모리 회원 저장소
                                        --> 정액 할인 정책

  주문 도메인 객체 다이어그램2 (상황에 따라 다르니 동적임.)
  -. 클라이언트  --> 주문 서비스 구현체   --> DB 회원 저장소
                                        --> 정률 할인 정책


 3-3. toString을 설정하면 -->> 객체를 찍으면 toString가 호출 된다.





