1. 이번 내용은 회원데이터, 할인 정책 같은 부분은 지금 결정하기 어려워서 추후에 진행할 것이다. 그래서 객체지향으로 방향으로 설계할 것이다.
   인터페이스를 만들고 구현체를 언제든지 갈아 끼울 수 있도록 설계 한다.

2-1. 회원 도메인 설계
  -. 회원을 가입 및 조회 기능
  -. 회원은 일반과 VIP 등급 두가지 있음.
  -. 회원 데이터는 자체 DB를 구축하거나 , 외부 시스템과 연동 할 수 있다.

2-2. 이럴 경우 설계는 어떻게 해야할까?
  도메인에대한 그림.  (기획자도 이해하는 그림)
    클라이언트  -->  회원서비스(가입,조회)  --> 회원저장소(인터페이스) -->/ 메모리 회원저장소, DB 회원 저장소, 외부 시스템 연동 회원 저장소 (구현체)

  회원 클래스 다이어 그램 (정적임.)
    MemberServier(I.P) / MemverServiceImpl   -->  MemberRepisotory(I.P) / MemoryMemberRepository , DbMemberRepository

  회원 객체 다이어 그램 (상황에 따라 다르니 동적임.)
    클라이언트 --> 회원서비스 --> 메모리 회원 저장소
  
3-1. 주문과 할인 도메인 설계
  -. 회원은 상품을 주문 가능
  -. 회원 등급에 따라 할인 정책 적용
  -. 모든 VIP는 1000원을 할인하게 고정할 것
  -. 할인 정책은 언제 반영할지 모르겠다.

3-2. 여기에서는
  -. 주문 생성 -> 회원 조회 -> 할인 적용 확인 -> 주문 결과 반환 순의 알고리즘으로 진
  주문 도메인 클래스 다이어 그램 (정적임.)
  -. OrderService(I.P) / OrderServiceImpl --> MemberRepository (I.P) / memoryMemberRepository , DbMemberRepository
                                          --> DiscountPolicy   (I.P) / FixDiscountPolicy  ,  RateDiscountPolicy

  주문 도메인 객체 다이어그램1 (상황에 따라 다르니 동적임.)
  -. 클라이언트  --> 주문 서비스 구현체   --> 메모리 회원 저장소
                                        --> 정액 할인 정책

  주문 도메인 객체 다이어그램2 (상황에 따라 다르니 동적임.)
  -. 클라이언트  --> 주문 서비스 구현체   --> DB 회원 저장소
                                        --> 정률 할인 정책


 3-3. toString을 설정하면 -->> 객체를 찍으면 toString가 호출 된다.

4. 객체지향 원리 적용 [☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆]
 4-1. 자바코드를 설계 할때에는 역할과 구현을 충실하게 분리하고, 다형성을 활용하여 인터페이스와 구현객체를 분리해야한다. 그치만 이것을 다 지키고도 DIP, OCP를 위반 할 수 있는데;
      private final DiscountPolicy memberRepository = new RateDiscountPolicy(); 이렇게 보면 인터페이스와 구현클래스를 둘다 의존하게 된다 그래서 기능을 바꾸게 된다면, 
      private final DiscountPolicy discountPolicy = new FixDiscountPolicy(); 이렇게 기능을 바꾸게 되는데 이는 구현클래스를 의존하게 되어서 결국 서비스 부분 코드를 변경하게 되니 결국 DIP를 위반하게 된다. 
      그렇다면 어떻게 구현해야 할 것인가?

 4-2. 구현클래스에는 의존성을 없애고 추상적인 인터페이스에만 의존성을 주입해야한다.
      -. 이를 해결 하기 위해서는 누군가가 클라이언트인 OrderServiceImpl에 DiscountPlicy의 구현 객체를 대신 생성하고 주입해야한다. 누군가는 AppConfig처럼 설정 하는 클래스이다. 
         그 방법으로는 아래와 같다.


'''  OrderServiceImpl
    private final MemberRepository memberRepository;
    private final DiscountPolicy discountPolicy;

    public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
        this.memberRepository = memberRepository;
        this.discountPolicy = discountPolicy;
    }
'''

'''  MemberServiceImpl
    private final MemberRepository memberRepository;

    public MemberServiceImpl(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }
'''

ServiceImpl에서는 인터페이스로만 의존성 관계를 가지며, Appconfig에서 구현클래스의 관계를 주입하면된다.

'''AppConfig
   public class AppConfig {
       public MemberRepository memberRepository(){
           return new MemoryMemberRepository();
       }
   
       public DiscountPolicy discountPolicy(){
           return new FixDiscountPolicy();
       }
   
       public MemberService memberService(){
           return new MemberServiceImpl(memberRepository());
       }
   
       public OrderService orderService(){
           return new OrderServiceImpl(memberRepository(), discountPolicy());
       }
   }
'''

실제로 실행할때는 
'''
      이렇게 해서 의존성 관계를 맺었는데
     //MemberService memberService = new MemberServiceImpl();

      이렇게 수정하여 진행한다.
     AppConfig appConfig = new AppConfig();
     MemberService memberService = appConfig.memberService();

     AppConfig appConfig = new AppConfig();
     MemberService memberService = appConfig.memberService();
     OrderService orderService = appConfig.orderService();
'''


5. Ioc, Di, 컨테이너
 5-1. 제어의 역전 (Ioc)
      AppConfig에서 어떤 구현클래스를 주입하는지에 따라서 기능구현이 달라진다. 즉 제어의 흐름에 대한 권한은 모두 AppConfig에서 가지고 있다.
      이렇듯 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)이라 한다.

 5-2. 프레임워크와 라이브러리 차이점
   -. 프레임워크는 내가 작성한 코드를 프레임워크가 제어한다. (Junit)
   -. 라이브러리는 내가 라이브러리를 호출하여 내가 작성한 코드로 내가 제어의 흐름을 담당하게 한다.

 5-3. 정적인 클래스 의존관계
   -. 클래스가 import 코드만 보고 의존관계를 쉽게 판단할 수 있다.
   -. >> OrderServiceImpl은 MemberRepository(I.P), DiscountPolicy(I.P)에 의존한다는 것을 알수 있다.
 5-4. 동적인 객체 인스턴스 의존관계
   -. 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존관계이다.
   -. 애플리케이션 실행 시점에 외부에서 실제 구현객체를 생성하고(AppConfig) 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결 되는 것을 의존관계 주입이라 한다.

 5-5. Ioc 컨테이너, DI컨테이너
   -. AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결 해주는 것을 IoC 컨테이너, DI 컨테이너라고 한다. 또는 어셈블러, 오브젝트 팩토리등으로 불린다.

6. 지금까지 배운것을 Spring으로 바꿔본다.
 6-1. AppConfig 변경
'''
@Configuration
public class AppConfig {

    @Bean
    public MemberRepository memberRepository(){
        return new MemoryMemberRepository();
    }
    @Bean
    public DiscountPolicy discountPolicy(){
        //return new FixDiscountPolicy();
        return new RateDiscountPolicy();
    }
    @Bean
    public MemberService memberService(){
        return new MemberServiceImpl(memberRepository());
    }
    @Bean
    public OrderService orderService(){
        return new OrderServiceImpl(memberRepository(), discountPolicy());
    }
}
'''
   @Configuration >> 설정 정보
   @Bean  >> 스프링 컨테이너에 등록

6-2. SpringBean에 등록된 내용 사용하기 (주로 Ctroller에서 사용)

'''
  1. ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
  // name = 메소드 이름, 두번째는 반환 타입.
  2. MemberService memberService = applicationContext.getBean("memberService", MemberService.class);
     OrderService orderService = applicationContext.getBean("orderServcie", OrderService.class);
'''
  new AnnotationConfigApplicationContex은 @Configuration이 붙은 어노테이션을 찾고 AppConfig.class (클래스이름을 호출한다.)
  2번에서는 SpringBean에 등록된 내용을 호출하는 

정리-----------------------
3. -. ApplicationContext를 스프링 컨테이너라 한다.
   -. 기존에는 개발자가 AppConfig를 사용해서 직접 객체를 생성하고 DI를 했지만,  이제부터는 스프링 컨테이너를 통해서 사용한다.
   -. 스프링컨테이너는 @Configuration이 붙은 AppConfig를 설정 정보로 사용한다. 여기에서 @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다. 이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.
   -. 스프링 빈은 @Bean이 붙은 메서드의 명을 스프링 빈의 name 이름으로 사용한다.
   -. 이전에는 개발자가 필요한 객체를 AppConfig를 사용해서 직접 조회했지만, 이제부터는 스프링 컨테이너를 통해서 필요한 스프링 빈을 찾아야 한다. 스프링빈은 applicationContext.getBean() 메서드를 사용해서 찾을 수 있다.

   -. 이렇게 보면 코드가 더 복잡해진것 같아 보이는데 왜 스프링 컨테이너를 사용하면 어떤 장점이 있을까?
   -. 다음 내용에서 자세히 다뤄보겠다.

