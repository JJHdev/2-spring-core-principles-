1. 빈스코프란?
  -. 스코프란 말 그대로 빈이 존재할 수 있는 범위를 말한다. 
  -. 싱글톤 @Scope("singleton") : 기본스코프, 스프링컨테이너외 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.
  -. 프로토타입 @Scope("prototype") : 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다.
  1-1. 웹관련 스코프
    -. request : 웹요청이 들어오고 나갈때까지 유지되는 스코프 이다.
    -. session : 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.
    -. application : 웹의 서블릿 컨텍스와 같은 범위로 유지되는 스코프이다.
2. 프로토타입 스코프
  -. 스프링컨테이너는 프로토타입 빈을 생성하고, 의존관계 주입, 초기화까지만 처리한다는 것 그리하여 프로토타입 빈을 관리할 책임은 프로토타입 빈을 받은 클라이언트에 있다.
     그래서 @Predestory 같은 종료 메서드가 호출되지 않는다.

3. 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 문제점
  -. 싱글톤 빈안에 프로토타입 빈을 받아서 사용시 싱글톤에서는 프로토타입 빈을 받아 의존성을 주입하여 같은 객체를 사용하게 되어 프로토타입 빈을 사용하는 이유가 사라진다.

4. 프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제해결 (DL로서 직접 의존성을 주입하는 기술)
  -. (getObject()) 코드가 진행시 그때 스프링컨테이너에서 찾아서 의존성을 주입.
  -. ObjectProvider --> spring 기술
  -. Provider    --> javax 기술 (자바표준으로 사용 추천)

5. 웹 스코프
  -. request : http 요청 하나가 들어오고 나갈때까지 유지되는 스코프 이다. (클라이언트 url 주소로 요청 할 경우부터 완료까지) -->> 의존관계 주입단계가 아니라 고객이 들어올 경우 생성되는 주기.
  -. session : http session과 동일한 생명주기를 가지는 스코프
  -. application : 서블릿 컨텍스트 와 동일한 생명주기를 가지는 스코프
  -. websocket : 웹소켓과 동일한 생명주기를 가지는 스코프

6. request 스코프 예제 만들기
  -. @Scope(value = "request") 를 사용해서 request 스코프로 지정했다. 이제 이 빈은 HTTP 요청 당 하나 씩 생성되고, HTTP 요청이 끝나는 시점에 소멸된다.
     이 빈이 생성되는 시점에 자동으로 @PostConstruct 초기화 메서드를 사용해서 uuid를 생성해서 저장해둔다. 
     이 빈은 HTTP 요청 당 하나씩 생성되므로, uuid를 저장해두면 다른 HTTP 요청과 구분할 수 있다.
     이 빈이 소멸되는 시점에 @PreDestroy 를 사용해서 종료 메시지를 남긴다.
     requestURL 은 이 빈이 생성되는 시점에는 알 수 없으므로, 외부에서 setter로 입력 받는다.

  -. 스프링 애플리케이션을 실행하는 시점에 싱글톤 빈은 생성해서 주입이 가능하지만, request 스코프 빈은 아직 생성되지 않는다. 이 빈은 실제 고객의 요청이 와야 생성할 수 있다!

7. 스코프와 Provider
  -. ObjectProvider 덕분에 ObjectProvider.getObject() 를 호출하는 시점까지 request scope 빈의 생성을 지연할 수 있다.
     ObjectProvider.getObject() 를 호출하시는 시점에는 HTTP 요청이 진행중이므로 request scope 빈의 생성이 정상 처리된다.
     ObjectProvider.getObject() 를 LogDemoController , LogDemoService 에서 각각 한번씩 따로 호출해도 같은 HTTP 요청이면 같은 스프링 빈이 반환된다! 

8. 스코프와 프록시
  -. 프록시를 이용하면, Provider를 사용안해도 된다. @Scope(proxyMode = ScopeProxyMode.TARGET_CLASS) 
  -. 왜 스프링빈에 등록되지 않은것을 어떻게 가져와서 DI를 한것일까?
  -. CGLIB라는 라이브러리로 내 클래스를 상속받은 가짜 프록시 객체를 만들어서 대신 주입한다.
  -. 이 가짜 프록시 객체는 사용하게되는 요청이 오면 그때 내부에서 진짜 빈을 찾아서 그때 찾아서 사용하게 된다. (빈껍데기는 프록시고 사용하게 되면 그때 진짜 빈에서 찾아서 사용한다.)

  -. 즉 Provider나 프록시는 서버가 실행될때가 아니라 진짜 요청이 들어오기 전까지 버티다가 요청이 들어오면 그때 객체를 제공하는게 핵심이다. 
  -. 각각 요청에 따라 싱글톤이 아니라, 각각의 요청에따라 객체가 다르니까 주의해서 사용해야 한다.
