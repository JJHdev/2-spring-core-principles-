1. 컴포넌트 스캔과 의존관계 자동 주입 시작하기.
  1-1. 스프링에서는 @Bean 과 같이 설정정보가 없어도 자동으로 스프링 빈을 등록하는 컴포넌트 스캔이라는 기능이 있다.
  1-2. 의존관계도 자동으로 주입하는 @Autowirde라는 기능도 제공한다.
  1-3. @ComponentScan은 @Component 애노테이션이 붙은 클래스를 스캔해서 스프링 빈으로 등록한다.
      이와 같이 붙여서 스프링 빈으로 등록 할수 있다.
      @Component
      public class MemberServiceImpl implements MemberService {}

  1-4. 의존성 관계주입은 아래와 같이 생성자에 @Autowried가 붙어 있으면 주입이 된다.

      @Component
      public class MemberServiceImpl implements MemberService {
          @Autowired
          public MemberServiceImpl(MemberRepository memberRepository) {
              this.memberRepository = memberRepository;
          }
      }
 ------------------------------------->> 
           @Component
        -. public class MemoryMemberRepository implements MemberRepository{} 여기에 MemoryMemberRepository에 @Component가 붙어 있어.
        -. @Autowried가 MemberRepository에 붙어 있어도 MemoryMemberRepository에 의존관계가 주입된다.

-------------------------------------------------
    @ComponentScan 은 @Component 가 붙은 모든 클래스를 스프링 빈으로 등록한다.
      이때 스프링 빈의 기본 이름은 클래스명을 사용하되 맨 앞글자만 소문자를 사용한다.
      빈 이름 기본 전략: MemberServiceImpl 클래스 memberServiceImpl
      빈 이름 직접 지정: 만약 스프링 빈의 이름을 직접 지정하고 싶으면
      @Component("memberService2") 이런식으로 이름을 부여하면 된다.

-------------------------------------------------
    생성자에 @Autowired 를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입한다.
    이때 기본 조회 전략은 타입이 같은 빈을 찾아서 주입한다.
    getBean(MemberRepository.class) 와 동일하다고 이해하면 된다.
    --> 자식타입이 같은게 2개 이상 있을경우 중복충돌 난다.

2. 탐색위치와 기본 스캔 대상
  2-1 -. @ComponentScan(basePackages = "hello.core.member"){}  --> 아래와 같은 경로로 스캔대상이 한정된다.
      -. 만약에 지정하지 않는다면. @ComponentScan이 있는 곳부터 (hello.core 에 있다면.) hello.core 부터 하위폴더를 스캔한다.
      -. @ComponentScan은 그래서 basePackages를 설정하지 않고 프로젝트에서 최상단에 배치하여 설정하는것이 기본 설정이다.
      -. 스프링부트의 시작정보인 @SpringBootApplication은 프로젝트 시작루트 위치에 두는게 관례인데 이 설정안에 @ComponentScan이 있기 때문이다.
         그래서 스프링부트를 사용하면, 자동적으로 스프링빈에 등록 되는것 같다.

  2-2 -. ComponentScan의 기본 대상은
      -. @Component, @Controller, @Service, @Repository, @Configuration 을 스캔 대상으로 한다. (@Component를 사용하고 있으므로)
      -. 애노테이션은 상속기능이 없는데, 이렇게 다른 애노테이션이 특정 애노테이션을 들고 인식이 되는것은 스프링이 지원 하는 기능이다.
      -. @Controller : 스프링 MVC 컨트롤러로 인식
      -. @Repository : 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환해준다.
      -. @Configuration : 앞서 보았듯이 스프링 설정 정보로 인식하고, 스프링 빈이 싱글톤을 유지하도록 추가 처리를 한다.
      -. @Service : 사실 @Service 는 특별한 처리를 하지 않는다. 대신 개발자들이 핵심 비즈니스 로직이 여기에 있겠구나 라고 비즈니스 계층을 인식하는데 도움이 된다.
  
3. 필터
```  componentScan에 추가할 애노테이션 (아래 설정으로 컴포넌트 스캔 대상으로 들어감)

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface MyIncludeComponent {}


추후 --> @MyIncludeComponent
         public void className{} 식으로 사용가능하다. 
        
```
```
@Configuration
@ComponentScan( includeFilters = @Filter(type = FilterType.ANNOTATION, classes = MyIncludeComponent.class),
                excludeFilters = @Filter(type = FilterType.ANNOTATION, classes = MyExcludeComponent.class))
 static class ComponentFilterAppConfig {
 }
```

includeFilters 에 MyIncludeComponent 애노테이션을 추가해서 BeanA가 스프링 빈에 등록된다.
excludeFilters 에 MyExcludeComponent 애노테이션을 추가해서 BeanB는 스프링 빈에 등록되지 않는
다.


4. 중복 등록과 충돌

자동 빈 등록 vs 자동 빈 등록
컴포넌트 스캔에 의해 자동으로 스프링 빈이 등록되는데, 그 이름이 같은 경우 스프링은 오류를 발생시킨다.
ConflictingBeanDefinitionException 예외 발생

수동 빈 등록 vs 자동 빈 등록
만약 수동 빈 등록과 자동 빈 등록에서 빈 이름이 충돌되면 이 경우 수동 빈 등록이 우선권을 가진다.
(수동 빈이 자동 빈을 오버라이딩 해버린다.)

그러나 스프링부트에서는 에러가 발생한다. (의도치 않은 에러유도로 인하여)
'''
수동 빈 등록, 자동 빈 등록 오류시 스프링 부트 에러
Consider renaming one of the beans or enabling overriding by setting 
spring.main.allow-bean-definition-overriding=true
스프링 부트인 CoreApplication 을 실행해보면 오류를 볼 수 있다.
'''




